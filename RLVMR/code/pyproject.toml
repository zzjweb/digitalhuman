# -------------------------------
# build-system
# -------------------------------
[build-system]
requires = [
    "setuptools>=61.0",
    "wheel"
]
build-backend = "setuptools.build_meta"

# -------------------------------
# project (PEP 621 metadata)
# -------------------------------
[project]
name = "verl"
# We'll mark the version as "dynamic" because it's read from the file "verl/version/version" 
# (PEP 621 calls this "dynamic version"). 
# The actual version is specified in the [tool.setuptools.dynamic] section below.
dynamic = ["version", "dependencies", "optional-dependencies", "authors", "urls"]

description = "verl: Volcano Engine Reinforcement Learning for LLM"
license = {file = "LICENSE"}  # or "Apache-2.0", if you prefer an SPDX identifier
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.8"

# -------------------------------
# tool.setuptools - Additional config
# -------------------------------
[tool.setuptools]
# True means `setuptools` will attempt to include all relevant files in package_data automatically.
# This corresponds to `include_package_data=True` in setup.py.
include-package-data = true

# We read the version from a file in 'verl/version/version'
[tool.setuptools.dynamic]
version = {file = "verl/version/version"}

# If you need to mimic `package_dir={'': '.'}`:
[tool.setuptools.package-dir]
"" = "."

# If you need to include specific non-Python data (like YAML files or version file):
# This is the rough equivalent of package_data={'': ['version/*'], 'verl': ['trainer/config/*.yaml']}
[tool.setuptools.package-data]
verl = [
  "version/*",
  "trainer/config/*.yaml"
]


[tool.pylint.message_control]
disable = [
    "abstract-method",
    "anomalous-backslash-in-string",
    "arguments-differ",
    "arguments-renamed",
    "assignment-from-none",
    "attribute-defined-outside-init",
    "bad-str-strip-call",
    "bare-except",
    "broad-exception-caught",
    "broad-exception-raised",
    "cell-var-from-loop",
    "chained-comparison",
    "consider-iterating-dictionary",
    "consider-using-enumerate",
    "consider-using-f-string",
    "consider-using-from-import",
    "consider-using-generator",
    "consider-using-in",
    "consider-using-max-builtin",
    "consider-using-set-comprehension",
    "consider-using-sys-exit",
    "consider-using-with",
    "cyclic-import",
    "dangerous-default-value",
    "duplicate-code",
    "eval-used",
    "expression-not-assigned",
    "f-string-without-interpolation",
    "fixme",
    "function-redefined",
    "global-statement",
    "global-variable-not-assigned",
    "import-error",
    "import-outside-toplevel",
    "import-self",
    "inconsistent-return-statements",
    "invalid-character-zero-width-space",
    "invalid-name",
    "line-too-long",
    "logging-fstring-interpolation",
    "logging-not-lazy",
    "missing-class-docstring",
    "missing-final-newline",
    "missing-function-docstring",
    "missing-module-docstring",
    "multiple-imports",
    "no-else-continue",
    "no-else-raise",
    "no-else-return",
    "no-member",
    "no-self-argument",
    "no-value-for-parameter",
    "not-an-iterable",
    "not-callable",
    "notimplemented-raised",
    "pointless-exception-statement",
    "pointless-string-statement",
    "pointless-statement",
    "possibly-used-before-assignment",
    "protected-access",
    "raise-missing-from",
    "raising-format-tuple",
    "redefined-argument-from-local",
    "redefined-builtin",
    "redefined-outer-name",
    "redundant-u-string-prefix",
    "reimported",
    "simplifiable-if-expression",
    "simplifiable-if-statement",
    "singleton-comparison",
    "super-init-not-called",
    "superfluous-parens",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-boolean-expressions",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-positional-arguments",
    "too-many-return-statements",
    "too-many-statements",
    "trailing-newlines",
    "trailing-newlines",
    "trailing-whitespace",
    "unbalanced-tuple-unpacking",
    "undefined-loop-variable",
    "undefined-variable",
    "ungrouped-imports",
    "unidiomatic-typecheck",
    "unnecessary-comprehension",
    "unnecessary-lambda",
    "unnecessary-lambda-assignment",
    "unnecessary-pass",
    "unspecified-encoding",
    "unused-argument",
    "unused-import",
    "unused-variable",
    "unused-wildcard-import",
    "use-a-generator",
    "use-dict-literal",
    "used-before-assignment",
    "useless-object-inheritance",
    "useless-parent-delegation",
    "useless-return",
    "wildcard-import",
    "wrong-import-order",
    "wrong-import-position",
]